@page "/fetchproducts"
@using FullStackFinalProject.Services
@inject HttpClient HttpClient
@inject AuthService Auth
@inject NavigationManager Nav

<h3>Product List</h3>

@if (!Auth.IsLoggedIn)
{
    <div class="alert alert-warning">
        You must be logged in to view products.
        <a href="/login" class="alert-link">Go to Login</a>
    </div>
}
else if (Auth.Role != "Admin")
{
    <div class="alert alert-danger">
        Only admins are allowed to view products.
    </div>
}
else if (products == null)
{
    <p><em>Loading products...</em></p>
}
else
{
    <div class="row">
        @foreach (var product in products)
        {
            <div class="col-md-3 mb-4">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text">$@product.Price</p>
                        <p class="text-muted">Stock: @product.Stock</p>
                        <p><strong>Category:</strong> @(product.Category?.Name ?? "N/A")</p>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private Product[]? products;

    protected override async Task OnInitializedAsync()
    {
        if (!Auth.IsLoggedIn || Auth.Role != "Admin")
        {
            return;
        }

        try
        {
            var response = await HttpClient.GetAsync($"api/productlist?role={Auth.Role}");
            response.EnsureSuccessStatusCode();

            var json = await response.Content.ReadAsStringAsync();

            products = System.Text.Json.JsonSerializer.Deserialize<Product[]>(json,
            new System.Text.Json.JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            Console.WriteLine($"✅ Fetched {products?.Length ?? 0} products successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error fetching products: {ex.Message}");
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public double Price { get; set; }
        public int Stock { get; set; }
        public Category? Category { get; set; }
    }

    public class Category
    {
        public int Id { get; set; }
        public string? Name { get; set; }
    }
}